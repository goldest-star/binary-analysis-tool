parameters:
  - name: artifactName
    type: string
    default: linux_release
  - name: pythonArtifact
    type: string
    default: python_linux

steps:
  - checkout: self
    persistCredentials: true

  - bash: |
      BUILD_ID=`curl 'https://dev.azure.com/mahlet-inc/hobbits/_apis/build/builds?api-version=5.0&%24top=1&definitions=2' | python -c "import sys, json; print(json.load(sys.stdin)['value'][0]['id'])"`
      echo "Build ID: ${BUILD_ID}"
      curl "https://dev.azure.com/mahlet-inc/hobbits/_apis/build/builds/${BUILD_ID}/artifacts?artifactName=${PYTHON_ARTIFACT}&api-version=5.1&%24format=zip" --output hobbits_python.zip
      unzip hobbits_python.zip
      rm -fv hobbits_python.zip
      mv ${PYTHON_ARTIFACT} hobbits_python
      cd hobbits_python
      tar xvf ${PYTHON_ARTIFACT}.tgz
      rm -fv ${PYTHON_ARTIFACT}.tgz
      ls -l $(Build.SourcesDirectory)/hobbits_python
    env:
      PYTHON_ARTIFACT: ${{ parameters.pythonArtifact }}
    displayName: 'Get hobbits python artifact'

  - bash: |
      rm .releaserc.json
      cp ci/justversion.releaserc.json .releaserc.json
      npm ci
      npx semantic-release
    displayName: 'Update the version number for the build'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

  - bash: |
      ./qmake_version_args.sh | sed 's/\([^\\]\)\\\\"/\1\\\\\\"/g' > qmake_args
      cat qmake_args
    workingDirectory: $(Build.SourcesDirectory)/src
    displayName: 'Get version arguments for qmake'

  - script: | 
      mkdir build
      cd build
      cmake -GNinja -DCPACK_GENERATOR="DEB;RPM;TXZ" -DCMAKE_PREFIX_PATH="${QT_LIB_DIR}"/cmake ..
    workingDirectory: $(Build.SourcesDirectory)
    displayName: 'Configure'

  - script: |
      cd $(Build.SourcesDirectory)/build
      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$QT_LIB_DIR
      ninja
    displayName: 'Build hobbits'

  - script: |
      cd $(Build.SourcesDirectory)/build
      ninja package
      mv hobbits-all-*-Linux.deb $(Build.ArtifactStagingDirectory)/
      mv hobbits-all-*-Linux.tar.xz $(Build.ArtifactStagingDirectory)/hobbits-all-${{ parameters.artifactName }}-Linux.txz

      mkdir -p libs
      cp --preserve=links -r $QT_PLATFORMS_DIR dependencies/bin
      cp --preserve=links $QT_LIB_DIR/libicu*.so* dependencies/lib
      cp --preserve=links $QT_LIB_DIR/libQt5Concurrent.so* dependencies/lib
      cp --preserve=links $QT_LIB_DIR/libQt5Core.so* dependencies/lib
      cp --preserve=links $QT_LIB_DIR/libQt5DBus.so* dependencies/lib
      cp --preserve=links $QT_LIB_DIR/libQt5Gui.so* dependencies/lib
      cp --preserve=links $QT_LIB_DIR/libQt5Network.so* dependencies/lib
      cp --preserve=links $QT_LIB_DIR/libQt5PrintSupport.so* dependencies/lib
      cp --preserve=links $QT_LIB_DIR/libQt5Sql.so* dependencies/lib
      cp --preserve=links $QT_LIB_DIR/libQt5Test.so* dependencies/lib
      cp --preserve=links $QT_LIB_DIR/libQt5WaylandClient.so* dependencies/lib
      cp --preserve=links $QT_LIB_DIR/libQt5Widgets.so* dependencies/lib
      cp --preserve=links $QT_LIB_DIR/libQt5XcbQpa.so* dependencies/lib
      cp --preserve=links $QT_LIB_DIR/libQt5Xml.so* dependencies/lib
      cp --preserve=links /usr/lib64/libfftw3.so* dependencies/lib
      cp --preserve=links /usr/lib/libfftw3.so* dependencies/lib
      cp --preserve=links /usr/local/lib/libfftw3.so* dependencies/lib
      cp --preserve=links /usr/local/lib64/libfftw3.so* dependencies/lib
      cd dependencies
      tar cvzf hobbits_dependencies_${{ parameters.artifactName }}.tgz bin lib plugins
    displayName: 'Collect and package dependencies files'
  
  - bash: |
      npm ci
      cd tests
      ./prepare_tests.js
      ./test_hobbits.js (Build.SourcesDirectory)/src/build/hobbits-runner/hobbits-runner (Build.SourcesDirectory)/src/build/python/python
    displayName: 'Run tests'

  - task: CopyFiles@2 
    inputs:
      sourceFolder: dependencies
      contents: hobbits_dependencies_${{ parameters.artifactName }}.txz
      targetFolder: $(Build.ArtifactStagingDirectory)

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: ${{ parameters.artifactName }}
